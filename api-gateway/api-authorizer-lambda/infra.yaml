# Template: Creates a REST API gateway integrated with Cognito User pools and a Lambda to authorize access to the API.

AWSTemplateFormatVersion: '2010-09-09'

Description: A CF template that creates an API Gateway with a Lambda authorizer.

Resources:
  
  # Public facing REST API Gateway.
  ApiGatewayRest:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: API gateway authorized w/ Cognito.
      EndpointConfiguration: 
        Types: 
          - REGIONAL
      Name: ApiLambdaAuthorizer

  # Resource for the REST API Gateway.  Defines a path for a URL.  In this case, /health path is created for health checks.
  ResourceApiGatewayHealth:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRest
        - RootResourceId
      PathPart: health
      RestApiId: !Ref ApiGatewayRest

  # Method - GET.  Adds the GET method options to the /health resource path.  Integrated with the CRUD Lambda function.
  MethodApiGatewayHealth:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:  
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Credentials: !GetAtt RoleLambdaExecution.Arn
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaDummy.Arn}/invocations'
      ResourceId: !Ref ResourceApiGatewayHealth
      RestApiId: !Ref ApiGatewayRest

  # Resource for the REST API Gateway.  Defines a path for a URL.  In this case, /health path is created for health checks.
  ResourceApiGatewayAuth:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRest
        - RootResourceId
      PathPart: auth
      RestApiId: !Ref ApiGatewayRest

  # Method - GET.  Adds the GET method options to the /health resource path.  Integrated with the CRUD Lambda function.
  MethodApiGatewayAuth:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizerId: !Ref AuthorizerApiGateway
      AuthorizationType: CUSTOM
      HttpMethod: GET
      Integration:  
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Credentials: !GetAtt RoleLambdaExecution.Arn
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaAuthorizer.Arn}/invocations'
      ResourceId: !Ref ResourceApiGatewayAuth
      RestApiId: !Ref ApiGatewayRest

  # Lambda authorizer for API Gateway
  AuthorizerApiGateway:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerCredentials: !GetAtt RoleLambdaExecution.Arn
      AuthorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaAuthorizer.Arn}/invocations"
      IdentitySource: method.request.header.authorization
      Name: LambdaAuthorizer
      ProviderARNs:
        - !GetAtt UserPoolCognitoApi.Arn
      RestApiId: !Ref ApiGatewayRest
      Type: TOKEN

  # PermissionsApiAuthorizer:
  #   Type: "AWS::Lambda::Permission"
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !GetAtt LambdaAuthorizer.Arn
  #     Principal: "apigateway.amazonaws.com"
  #     SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/authorizers/${AuthorizerApiGateway}"

  # Deploys the REST API to a stage so that clients can call the API over the internet.  The stage acts as an environment.
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: MethodApiGatewayHealth
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref ApiGatewayRest

  # Creates the Stage that the API gateway gets deployed to, this stage is 'dev'.
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage v0
      RestApiId: !Ref ApiGatewayRest
      StageName: 'dev'

  # Cognito User Pool used as authorizer for API gateway
  UserPoolCognitoApi:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ApiUserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPoolCognitoApi
      ClientName: ApiUserPoolClient
      GenerateSecret: false # set to false for web clients
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs: 
        - https://example.com/callback
      LogoutURLs: 
        - https://example.com/signout
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin

  # Domain name prefix for Cognito UI.
  # Sets the prefix for the full domain that users utilize to access a sign-in / sign-up form.
  # Setting can be access through UI in the 'Domain Name' menu under the App Integration settings.
  UserPoolDomainApi:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: exampledomainforapi
      UserPoolId: !Ref UserPoolCognitoApi

  # Role that gives API gateway access to all operations for the Dummy Lambda. Also gives API Gateway ability to publish logs to CloudWatch.
  RoleLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: [apigateway.amazonaws.com]
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaDummyAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt LambdaDummy.Arn
        - PolicyName: LambdaAuthAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt LambdaAuthorizer.Arn
        - PolicyName: LogsPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: '*' 
      RoleName: LambdaExecutionRole

  # Role for Lambda to allow it to publish logs during execution.
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: LambdaPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: '*' 
      RoleName: LambdaRole 
    
  # Lambda function (Dummy) that returns a 200 response with the event body when triggered.
  LambdaDummy:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function integrated w/ API for CRUD operations.
      FunctionName: DummyLambda
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs12.x
      Code:         
        ZipFile:  |
          exports.handler = async (event) => {
            console.log('Loading function');
            const response = {
              statusCode: 200,
              body: JSON.stringify("This signals a successful API call without a Lambda authorizer token.")
            }
            return response;
          }

  LambdaAuthorizer:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function integrated w/ API for authroizing API calls.
      FunctionName: AuthorizerLambda
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs12.x
      Code:         
        ZipFile:  |
          exports.handler = async (event) => {
            console.log('Loading function....');
            console.log('Event:', event);
            let auth;
            if (event.authorization === 'abc123') {
              auth = 'allow';
            } else {
              auth = 'deny';
            }

            const authResponse = { "principalId": "abc123", "policyDocument": { "Version": "2012-10-17", "Statement": [{"Action": "execute-api:Invoke", "Resource": "arn:aws:execute-api:${AWS::Region}:${AWS::Account}:*/*/*", "Effect": auth}]}}
            const response = {
              statusCode: 200,
              body: JSON.stringify("This signals a successful API call with a Lambda authorizer token.")
            }
            return authResponse;
          }


  # Lambda permission that grants API Gateway the ability to invoke the function at a specific path.  Allows GET requests for all paths.      
  PermissionLambdaRandom:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Ref LambdaDummy
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: ApiGatewayRest
          - "/*/GET/health"