# Template: Creates a REST API gateway integrated w/ a lambda function using inline code.

# CLI CALL - aws cloudformation create-stack --stack-name <StackName> --template-body file://<FileName> --capabilities CAPABILITY_IAM
# In some cases, must explicitly acknowledge that your stack template contains certain capabilities 
AWSTemplateFormatVersion: '2010-09-09'
Description: A CF template that creates an API Gateway with a single resource integrated with a Lambda function backend.

Resources:
  # Public facing REST API Gateway.
  ApiGatewayRest:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Test API integration w/ Lambda.
      EndpointConfiguration: 
        Types: 
          - REGIONAL
      Name: TestCFApi

  # Resource for the REST API Gateway.  Defines a path for a URL.  In this case, /random path is created.
  ResourceApiGatewayRandom:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRest
        - RootResourceId
      PathPart: random
      RestApiId: !Ref ApiGatewayRest

  # Method - GET.  Adds the GET method options to the /random resource path.  Integrated with the Random Lambda function via a non-proxy integration type.
  # PROXY INTEGRATION - recommended integration type, as it simplifies management of the API and reduces response times.  When a client submits an API
  #                     request, the request is passed to the backend as-is (order of parameters is not preserved).  Request parameters can be referred as 
  #                     headers, query strings, path parameters, etc.
  # NON-PROXY INTEGRATION - Must be sure that the input to the backend is supplied as the integration request payload.  Aka must map query string parameters
  #                         and any input data the client supplied into the proper integration request body using a mapping template.
  # By default, API Gateway strips out user input.  Define input variables to shape info accepted by API.
  MethodApiGatewayRandom:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:  
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        # CacheKeyParameters:
        #   - method.request.path.action
        Credentials: !GetAtt RoleApiGateway.Arn
        # RequestParameters:
        #   integration.request.path.action: method.request.path.action
        # RequestTemplates:
        #   "application/json": "{\"min\": $input.params('min'), \"max\": $input.params('max')}"
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaRandom.Arn}/invocations'
      # RequestParameters:
      #   method.request.path.action: true
      ResourceId: !Ref ResourceApiGatewayRandom
      RestApiId: !Ref ApiGatewayRest

  # Deploys the REST API to a stage so that clients can call the API over the internet.  The stage acts as an environment.
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: MethodApiGatewayRandom
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref ApiGatewayRest

  # Creates the Stage that the API gateway gets deployed to.
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage v0
      RestApiId: !Ref ApiGatewayRest
      StageName: 'Dev'

  # Role that gives API gateway access to all operations for the Random Lambda.
  RoleApiGateway:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: [apigateway.amazonaws.com]
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt LambdaRandom.Arn
      RoleName: ApiGatewayLambdaExecutionRole

  # Role for Lambda to allow it to publish logs.
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: LambdaPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: '*' 
      RoleName: LambdaRole 
    
  # Lambda function (Random) that returns a random number 1-10.
  LambdaRandom:
    Type: AWS::Lambda::Function
    Properties:
      Description: Test Lambda function integrated w/ API.
      FunctionName: RandomLambda
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs12.x
      Code:
        ZipFile:  |
          console.log('Loading function');
          
          exports.handler = (event, context, callback) => {
              let min = 0;
              let max = 10;

              let generatedNumber = Math.floor(Math.random() * max) + min;
              let responseCode = 200;

                let response = {
                  statusCode: responseCode,
                  headers: {
                      "x-custom-header" : "my custom header value"
                  },
                  body: JSON.stringify(responseBody)
              }

              return response;
              
          };

  # Lambda permission that grants API Gateway the ability to invoke the function at a specific path.        
  PermissionLambdaRandom:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Ref LambdaRandom
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: ApiGatewayRest
          - "/*/GET/random"
