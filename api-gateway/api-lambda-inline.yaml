# Template: Creates a REST API gateway integrated w/ a lambda function
# Example here is inline code defined within template for Lambda

# CLI CALL - aws cloudformation create-stack --stack-name <StackName> --template-body file://<FileName> --capabilities CAPABILITY_IAM
# In some cases, must explicitly acknowledge that your stack template contains certain capabilities 
AWSTemplateFormatVersion: '2010-09-09'
Description: A CF template that creates a VPC for Resource Access Manager

Resources:
  
  ApiGatewayRest:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Test API integration w/ Lambda.
      EndpointConfiguration: 
        Types: 
          - REGIONAL
      Name: TestCFApi

  ResourceApiGatewayRandom:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRest
        - RootResourceId
      PathPart: random
      RestApiId: !Ref ApiGatewayRest

  MethodApiGatewayRandom:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:  
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Credentials: !GetAtt IamRoleApiGateway.Arn
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaRandom.Arn}/invocations'
      ResourceId: !Ref ResourceApiGatewayRandom
      RestApiId: !Ref ApiGatewayRest

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: MethodApiGatewayRandom
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref ApiGatewayRest

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage v0
      RestApiId: !Ref ApiGatewayRest
      StageName: 'Dev'

  IamRoleApiGateway:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt LambdaRandom.Arn

  LambdaRandom:
    Type: AWS::Lambda::Function
    Properties:
      Description: Test Lambda function integrated w/ API.
      FunctionName: RandomLambda
      Handler: index.handler
      Role: arn:aws:iam::938884152055:role/service-role/TestFunciton-role-2p33j9j7
      Runtime: nodejs12.x
      Code:
        ZipFile:  |
          console.log('Loading function');

          exports.handler = async (event) => {
              let min = 0;
              let max = 10;
              let responseCode = 200;
              
              let generatedNumber = Math.floor(Math.random() * max) + min;
              
              let responseBody = {
                  message: generatedNumber,
                  input: event
              }
              
              let response = {
                  statusCode: responseCode,
                  headers: {
                      "x-custom-header" : "my custom header value"
                  },
                  body: JSON.stringify(responseBody)
              }
              
              console.log("response: " + JSON.stringify(response));
              return response;
              
          };
          
  PermissionLambdaRandom:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Ref LambdaRandom
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: ApiGatewayRest
          - "/*/GET/random"
