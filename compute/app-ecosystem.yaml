# CLI CALL - ws cloudformation create-stack --stack-name <StackName> --template-body file://<FileName> --capabilities CAPABILITY_IAM
# In some cases, must explicitly acknowledge that your stack template contains certain capabilities 
# If you have IAM resources, you can specify either capability (link to AWS CLI reference: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html)
# Resources in this template affect permissions in AWS account
AWSTemplateFormatVersion: '2010-09-09'
Description: A CF template that creates a VPC for Resource Access Manager
Mappings: 
  RegionMap: 
    us-east-1: 
      AMI: "ami-04d29b6f966df1537"
    us-west-1: 
      AMI: "ami-08d9a394ac1c2994c"
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-VPC" ]]
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn: VPC
    Properties:
      Tags:
      - Key: Name
        Value: "Tyler-App-VPC-IGW"
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetPublicA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.1.10.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-A
  SubnetPublicB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.1.20.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-B
  SubnetPrivateA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.1.50.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-A
  SubnetPrivateB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.1.60.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-B
  RouteTablePublic: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  # Public route table has direct routing to IGW:
  RoutePublic1: 
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  RouteTableAssociationSubnetPublicA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublicA
      RouteTableId: !Ref RouteTablePublic
  RouteTableAssociationSubnetPublicB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublicB
      RouteTableId: !Ref RouteTablePublic
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for web servers.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 24.12.77.228/32
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 24.12.77.228/32
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIp: 24.12.77.228/32
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId:
            Fn::GetAtt:
            - ALBSecurityGroup
            - GroupId
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-WebServerSecurityGroup
  WebServer1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: t2.micro                                    # Default is m1.small
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          SubnetId:
            Ref: SubnetPublicA
          GroupSet:
            - Ref: WebServerSecurityGroup
      UserData:
        'Fn::Base64': 
          !Sub |
            #!/bin/bash
            # install apache
            sudo yum update -y
            sudo yum install httpd -y  
            
            # start server
            service httpd start
            chkconfig httpd on

            # navigate to html dir
            echo "Hello World" > /var/www/html/index.html
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-WebServer1
  WebServer2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: t2.micro                                    # Default is m1.small
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          SubnetId:
            Ref: SubnetPublicB
          GroupSet:
            - Ref: WebServerSecurityGroup
      UserData:
        'Fn::Base64': 
          !Sub |
            #!/bin/bash
            # install apache
            sudo yum update -y
            sudo yum install httpd -y  
            
            # start server
            service httpd start
            chkconfig httpd on

            # navigate to html dir
            echo "Hello World 2" > /var/www/html/index.html
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-WebServer2
  LoadBalancerWebServer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-ALB
      IpAddressType: ipv4
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref SubnetPublicA
        - !Ref SubnetPublicB
      SecurityGroups: 
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ALB
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for ALB in front of web servers.
      GroupName: "Tyler-CF-Web-ALB-SG"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - 
          CidrIp: "24.12.77.228/32"
          FromPort: 80
          IpProtocol: "tcp"
          ToPort: 80
        - 
          CidrIp: "24.12.77.228/32"
          FromPort: 443
          IpProtocol: "tcp"
          ToPort: 443
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebServerTargetGroup
      LoadBalancerArn: 
        Ref: LoadBalancerWebServer
      Port: 80
      Protocol: HTTP
  WebServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: 'HTTP'
      VpcId: !Ref VPC
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Targets:
        - Id: !Ref WebServer1
          Port: 80
        - Id: !Ref WebServer2
          Port: 80
      Tags:
        - Key: "Name"
          Value: "Tyler-CF-Web-TG"
  