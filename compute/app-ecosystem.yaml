# CLI CALL - ws cloudformation create-stack --stack-name <StackName> --template-body file://<FileName> --capabilities CAPABILITY_IAM
# In some cases, must explicitly acknowledge that your stack template contains certain capabilities 
# If you have IAM resources, you can specify either capability (link to AWS CLI reference: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html)
# Resources in this template affect permissions in AWS account
AWSTemplateFormatVersion: '2010-09-09'
Description: A CF template that creates a VPC for Resource Access Manager
Mappings: 
  RegionMap: 
    us-east-1: 
      AMI: "ami-04d29b6f966df1537"
    us-west-1: 
      AMI: "ami-08d9a394ac1c2994c"
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.16.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: "Tyler-App-VPC"
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: "Tyler-App-VPC-IGW"
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetAppA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.16.32.0/20
      Tags:
        - Key: Name
          Value: sn-app-A
  SubnetAppB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.16.96.0/20
      Tags:
        - Key: Name
          Value: sn-app-B
  SubnetAppC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.16.160.0/20
      Tags:
        - Key: Name
          Value: sn-app-C
  SubnetWebA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.16.48.0/20
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: sn-web-A
  SubnetWebB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.16.112.0/20
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: sn-web-B
  SubnetWebC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.16.176.0/20
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: sn-web-C
  RouteTableWeb: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: tyler-vpc1-rt-web
  # Public route table has direct routing to IGW:
  RouteTableWebDefaultIPv4: 
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: RouteTableWeb
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetWebA
      RouteTableId: !Ref RouteTableWeb
  WebServer1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: t2.micro                                    # Default is m1.small
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          SubnetId:
            Ref: SubnetWebA
          GroupSet:
            - Ref: WebServerSecurityGroup
      UserData:
        'Fn::Base64': 
          !Sub |
            #!/bin/bash
            # install apache
            sudo yum update -y
            sudo yum install httpd -y  
            
            # start server
            service httpd start
            chkconfig httpd on

            # navigate to html dir
            echo "Hello World 1" > /var/www/html/index.html
      Tags:
        - Key: "Name"
          Value: "Tyler-CF-WebServer1"
  WebServer2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: t2.micro                                    # Default is m1.small
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          SubnetId:
            Ref: SubnetWebB
          GroupSet:
            - Ref: WebServerSecurityGroup
      UserData:
        'Fn::Base64': 
          !Sub |
            #!/bin/bash
            # install apache
            sudo yum update -y
            sudo yum install httpd -y  
            
            # start server
            service httpd start
            chkconfig httpd on

            # navigate to html dir
            echo "Hello World 1" > /var/www/html/index.html
      Tags:
        - Key: "Name"
          Value: "Tyler-CF-WebServer2"
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for web server.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 24.12.77.228/32
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 24.12.77.228/32
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIp: 24.12.77.228/32
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      Tags:
        - Key: "Name"
          Value: "Tyler-CF-SG-Web"
  WebServerLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "Tyler-CF-Web-LB"
      IpAddressType: ipv4
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref SubnetWebA
        - !Ref SubnetWebB
      SecurityGroups: 
        - !Ref ALBSecurityGroup
      Tags:
        - Key: "Name"
          Value: "Tyler-CF-ALB"
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for ALB in front of web servers.
      GroupName: "Tyler-CF-Web-ALB-SG"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - 
          CidrIp: "24.12.77.228/32"
          FromPort: 80
          IpProtocol: "tcp"
          ToPort: 80
        - 
          CidrIp: "24.12.77.228/32"
          FromPort: 443
          IpProtocol: "tcp"
          ToPort: 443
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebServerTargetGroup
      LoadBalancerArn: 
        Ref: WebServerLoadBalancer
      Port: 80
      Protocol: HTTP
  WebServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: 'HTTP'
      VpcId: !Ref VPC
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Targets:
        - Id: !Ref WebServer1
          Port: 80
        - Id: !Ref WebServer2
          Port: 80
      Tags:
        - Key: "Name"
          Value: "Tyler-CF-Web-TG"
Outputs:
    VPC: 
      Description: VPC created from this CF stack.
      Value: !Ref VPC
    WebSubnets:
      Description: A list of the public subnets from this CF stack.
      Value: !Join [ ", ", [ !Ref SubnetWebA, !Ref SubnetWebB, !Ref SubnetWebC ]]
    AppSubnets:
      Description: A list of the private subnets from this CF stack.
      Value: !Join [ ", ", [ !Ref SubnetAppA, !Ref SubnetAppB, !Ref SubnetAppC,]]
    SecurityGroupId:
      Value: !GetAtt [WebServerSecurityGroup, GroupId]
      Description: Security Group Id for the web server.